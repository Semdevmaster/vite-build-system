# Serve Webp and Avif
map $http_accept $webp_suffix {
  "~*webp" ".webp";
}

map $http_accept $avif_suffix {
  "~*avif" ".avif";
  "~*webp" ".webp";
}

upstream php-upstream {
    server ${NGINX_PHP_UPSTREAM_CONTAINER}:${NGINX_PHP_UPSTREAM_PORT};
}

server {
    # Base config
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${APP_HOST};
    root ${NGINX_PUBLIC_PATH};
    index index.php index.html;

    # If the client stops reading the response, Nginx will drop the connection to it
    reset_timedout_connection on;

    # Nginx will wait 10 seconds for a request body from the client, after which it will reset the connection
    client_body_timeout 10;

    # If the client stops reading the response, Nginx will wait 10 seconds and reset the connection
    send_timeout 10;

    # SSL config
    ssl_certificate /etc/nginx/ssl/${APP_CERT};
    ssl_certificate_key /etc/nginx/ssl/${APP_CERT_KEY};
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    # OCSP stapling
    #ssl_stapling on;
    #ssl_stapling_verify on;
    #ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;
    #resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 94.228.118.141 valid=60s;
    #resolver_timeout 2s;

    # HTTP Request Sent to HTTPS Port (will redirect 301 to https)
    error_page 497 https://$host$request_uri;

    # Security headers
    set $frame_options '';
    if ($http_referer !~ '^https?:\/\/([^\/]+\.)?(webvisor\.com|metri[ck]a\.yandex\.(com|ru|com\.tr))\/'){
        set $frame_options 'SAMEORIGIN';
    }
    add_header X-Frame-Options $frame_options;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    #add_header Access-Control-Allow-Origin "*";

    # GZIP compression
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_comp_level 6;
    gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml text/json image/svg+xml image/x-icon application/manifest+json application/json;
    gzip_vary on;
    gzip_proxied expired no-cache no-store private auth;
    gzip_disable "MSIE [1-6]\.";

    # BROTLI compression
    brotli on;
    brotli_comp_level 5;
    brotli_static on;
    brotli_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml text/json image/svg+xml image/x-icon application/manifest+json application/json;

    # Locations
    location / {
        try_files $uri $uri/ @rewrite;
    }

    location @rewrite {
        rewrite ^/(.*)$ /index.php?q=$1;
    }

    if ($request_uri ~ ".*/$") {
        rewrite ^/((?!manager|setup).*)/$ /$1 permanent;
    }

    location ~ ^/core/.* {
        deny all;
        return 403;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass php-upstream;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }

    # Access to security folders
    #location ~* ^/(manager|core|connectors)/ {
    #    auth_basic "Restricted Access";
    #    auth_basic_user_file /var/www/.htpasswd;
    #    try_files $uri $uri/ @rewrite;
    #    location ~ \.php$ {
    #        include fastcgi_params;
    #        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    #        fastcgi_pass php-upstream;
    #    }
    #}

    # Serve webp and avif
    location ~* ^(/assets/.+)\.(jpe?g|png)$ {
        set $base $1;
        set $webp_uri $base$webp_suffix;
        set $avif_uri $base$avif_suffix;
        add_header Vary Accept;
        try_files $avif_uri $webp_uri $uri @rewrite;
        access_log off;
        # only for development
        add_header Cache-Control 'no-store, no-cache';
        # for production
        #expires 30d;
        break;
    }

    # Assets, media
    location ~* ^(/assets/.+)\.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|svg|ico|cur|heic|webp|avif|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv|webmanifest)$ {
        try_files $uri @rewrite;
        access_log off;
        # only for development
        add_header Cache-Control 'no-store, no-cache';
        # for production
        #expires 30d;
        break;
    }

    location ~* ^(/manager/.+)\.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|svg|ico|cur|heic|webp|avif|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv|webmanifest)$ {
        try_files $uri @rewrite;
        access_log off;
        expires 30d;
        break;
    }

    # Fonts
    location ~* \.ttf|ttc|otf|eot|woff2?$ {
        expires 365d;
    }

    # Forbidden files or directories
    location ~ ^/(\.user.ini|\.htaccess|\.htpasswd|\.git|\.svn|\.project|LICENSE|README.md) {
        return 404;
    }

    # Forbidden . files
    location ~ /\.(?!well-known) {
        deny all;
    }

    # Directory verification related settings for one-click application for SSL certificate
    location ~ \.well-known {
        root ${APP_CODE_PATH_CONTAINER}/letsencrypt/;
    }

    # Logs
    access_log off;
    error_log /var/log/nginx/${APP_HOST}.error.log error;
    # for production
    #error_log /var/log/nginx/${APP_HOST}.error.log crit;
}

# Server block that redirects to https and without www and without trailing slash
server {
    listen 80;
    listen [::]:80;
    server_name ${APP_HOST} www.${APP_HOST};
    location / {
        rewrite ^/(.*)/$ /$1;
        return 301 https://${APP_HOST}$uri;
    }
}

server {
    listen 443;
    listen [::]:443 ssl http2;
    server_name www.${APP_HOST};
    ssl_certificate /etc/nginx/ssl/${APP_CERT};
    ssl_certificate_key /etc/nginx/ssl/${APP_CERT_KEY};
    location / {
        rewrite ^/(.*)/$ /$1;
        return 301 https://${APP_HOST}$uri;
    }
}

# Server block that refuses all connections with unknown host name
# server {
#     listen 80 default_server;
#     listen 443 ssl http2 default_server;
#     listen [::]:80 default_server;
#     listen [::]:443 ssl http2 default_server;
#     ssl_reject_handshake on;
#     return 444;
# }
